<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Student Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
  <style>
    :root {
      --primary-color: #0088b9;
      --secondary-color: #19396e;
      --accent-color: #ffc82e;
      --green-accent: #1e8c3f;
      --light-bg: #f0f8fc;
      --card-bg: #fff;
      --text-color: #19396e;
      --light-text: #fff;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Poppins", sans-serif;
      background-color: var(--light-bg);
      color: var(--text-color);
    }

    header {
      background-color: var(--primary-color);
      color: var(--light-text);
      padding: 15px 0;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
      border-bottom: 4px solid var(--accent-color);
    }

    .navbar {
      width: 90%;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .navbar h1 {
      font-size: 1.5rem;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
    }

    nav.nav-links {
      display: flex;
      gap: 10px;
    }

    nav.nav-links a {
      color: var(--light-text);
      text-decoration: none;
      font-weight: 600;
      padding: 6px 12px;
      border-radius: 4px;
      transition: all 0.3s;
    }

    nav.nav-links a:hover {
      background-color: var(--accent-color);
      color: var(--secondary-color);
    }

    .container {
      width: 90%;
      margin: 20px auto;
    }

    footer {
      background-color: var(--primary-color);
      color: var(--light-text);
      text-align: center;
      padding: 15px;
      margin-top: 30px;
      border-top: 4px solid var(--accent-color);
    }

    .card {
      background-color: var(--card-bg);
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      padding: 20px;
      margin-bottom: 20px;
      border-top: 3px solid var(--green-accent);
    }

    .card h2 {
      margin-bottom: 15px;
      font-size: 1.2rem;
      color: var(--secondary-color);
      padding-bottom: 8px;
      border-bottom: 2px solid var(--accent-color);
    }

    .row {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }

    .col-3,
    .col-6,
    .col-9,
    .col-12 {
      padding: 5px;
    }

    @media (max-width: 768px) {
      .row {
        flex-direction: column;
      }
    }

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      transition: border 0.3s;
    }

    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
    }

    .btn {
      background-color: var(--secondary-color);
      color: var(--light-text);
      padding: 8px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s;
    }

    .btn:hover {
      background-color: var(--accent-color);
      color: var(--secondary-color);
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    table thead tr {
      background-color: var(--primary-color);
      color: var(--light-text);
    }

    table th,
    table td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    table tr:hover {
      background-color: rgba(0, 136, 185, 0.05);
    }

    #calendar {
      max-width: 100%;
      margin: 0 auto;
    }

    .conflict {
      background-color: rgba(231, 76, 60, 0.7) !important;
    }

    .completed-badge {
      background-color: var(--green-accent);
      color: white;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 0.9em;
      display: inline-block;
    }

    .complete-btn {
      background-color: var(--primary-color);
      color: white;
      margin-right: 5px;
      padding: 5px 10px;
      font-size: 0.9em;
    }

    .complete-btn:hover {
      background-color: var(--accent-color);
      color: var(--secondary-color);
    }

    .drop-btn {
      background-color: #e74c3c;
    }

    .drop-btn:hover {
      background-color: #c0392b;
    }

    #completedCoursesTable tr:nth-child(even) {
      background-color: rgba(0, 136, 185, 0.05);
    }

    #completedCoursesTable tr:hover {
      background-color: rgba(0, 136, 185, 0.1);
    }

    #completedCoursesTable td {
      padding: 8px;
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background: rgba(25, 57, 110, 0.7);
    }

    .modal-content {
      background-color: #fff;
      margin: 10% auto;
      padding: 20px;
      border-radius: 8px;
      width: 80%;
      max-width: 600px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      border-top: 4px solid var(--accent-color);
    }

    .close-modal {
      float: right;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--primary-color);
      transition: color 0.3s;
    }

    .close-modal:hover {
      color: var(--accent-color);
    }

    label {
      color: var(--secondary-color);
      font-weight: 600;
    }

    .fc-button-primary {
      background-color: var(--secondary-color) !important;
      border-color: var(--secondary-color) !important;
    }

    .fc-button-primary:hover {
      background-color: var(--primary-color) !important;
      border-color: var(--primary-color) !important;
    }

    .fc-button-active {
      background-color: var(--accent-color) !important;
      border-color: var(--accent-color) !important;
      color: var(--secondary-color) !important;
    }

    .fc-col-header-cell {
      background-color: var(--primary-color);
      color: var(--light-text);
    }

    .fc-col-header-cell-cushion {
      color: var(--light-text);
    }

    .fc-timegrid-slot {
      border-color: rgba(0, 136, 185, 0.1);
    }

    .fc-today-button {
      color: var(--light-text) !important;
    }
  </style>
</head>

<body>
  <header>
    <div class="navbar">
      <h1>Course Management System</h1>
      <nav class="nav-links">
        <a href="/student/dashboard">Dashboard</a>
        <a href="/student/register">Register Course</a>
        <a href="/student/schedule">Weekly Schedule</a>
        <a href="/auth/logout">Logout</a>
      </nav>
    </div>
  </header>
  <div class="container">
    <div class="card">
      <h2>Filter Courses</h2>
      <div class="row">
        <div class="col-3">
          <label for="department">Department</label>
          <select id="department" class="form-control">
            <option value="">All</option>
            <option value="Software Engineering">Software Engineering</option>
            <option value="Computer Science">Computer Science</option>
            <option value="Data Science">Data Science</option>
            <option value="Artificial Intelligence">
              Artificial Intelligence
            </option>
          </select>
        </div>
        <div class="col-3">
          <label for="level">Level</label>
          <select id="level" class="form-control">
            <option value="">All</option>
            <option value="100">100</option>
            <option value="200">200</option>
            <option value="300">300</option>
            <option value="400">400</option>
            <option value="500">500</option>
          </select>
        </div>

        <div class="col-3">
          <label for="days">Days</label>
          <select id="days" class="form-control">
            <option value="">Any</option>
            <option value="Mon">Mon</option>
            <option value="Tue">Tue</option>
            <option value="Wed">Wed</option>
            <option value="Thu">Thu</option>
            <option value="Fri">Fri</option>
          </select>
        </div>
        <div class="col-3">
          <label for="time">Time</label>
          <select id="time" class="form-control">
            <option value="">Any</option>
            <option value="morning">Morning (8AM-12PM)</option>
            <option value="afternoon">Afternoon (12PM-4PM)</option>
            <option value="evening">Evening (4PM-8PM)</option>
          </select>
        </div>
      </div>
      <button id="searchBtn" class="btn" style="margin-top: 10px">
        Search
      </button>
    </div>

    <div class="card">
      <h2>Available Courses</h2>
      <table>
        <thead>
          <tr>
            <th>Course Code</th>
            <th>Title</th>
            <th>Department</th>
            <th>Level</th>
            <th>Seats</th>
            <th>Days</th>
            <th>Time</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="courseTableBody">
          <tr>
            <td colspan="8">Loading courses...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="card">
      <h2>My Registered Courses</h2>
      <table>
        <thead>
          <tr>
            <th>Course Code</th>
            <th>Title</th>
            <th>Department</th>
            <th>Level</th>
            <th>Days</th>
            <th>Time</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="registeredCoursesTable">
        </tbody>
      </table>
    </div>

    <div class="card">
      <h2>Completed Courses</h2>
      <table>
        <thead>
          <tr>
            <th>Course Code</th>
            <th>Title</th>
            <th>Grade</th>
          </tr>
        </thead>
        <tbody id="completedCoursesTable">
        </tbody>
      </table>
    </div>

    <div class="card">
      <h2>Your Weekly Schedule</h2>
      <div id="calendar"></div>
    </div>
  </div>
  <footer>
    <p>&copy; 2025 National University of Sciences. All rights reserved.</p>
  </footer>

  <div id="courseDetailModal" class="modal">
    <div class="modal-content">
      <span class="close-modal" id="closeModal">&times;</span>
      <h2 id="modalCourseTitle">Course Details</h2>
      <p><strong>Course Code:</strong> <span id="modalCourseCode"></span></p>
      <p><strong>Department:</strong> <span id="modalDepartment"></span></p>
      <p><strong>Level:</strong> <span id="modalLevel"></span></p>
      <p>
        <strong>Prerequisites:</strong> <span id="modalPrerequisites"></span>
      </p>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
  <script>
    let calendar;

    function updateCalendarEvents(registeredCourses) {
      let events = [];
      const now = new Date();
      const dayOfWeek = now.getDay();
      const diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
      const monday = new Date(now);
      monday.setDate(now.getDate() + diffToMonday);

      const activeCourses = registeredCourses.filter(course => !course.completed);

      activeCourses.forEach((course) => {
        if (!course.time || !course.days || !course.days.length) return;

        const times = course.time.split("-");
        if (times.length !== 2) return;

        const startTime = times[0].trim();
        const endTime = times[1].trim();

        course.days.forEach((day) => {
          const dayShort = day.toLowerCase().substring(0, 3);
          const dayMap = {
            'mon': 0,
            'tue': 1,
            'wed': 2,
            'thu': 3,
            'fri': 4,
            'sat': 5,
            'sun': 6
          };
          const dayIndex = dayMap[dayShort];
          if (dayIndex === undefined) return;

          let eventDate = new Date(monday);
          eventDate.setDate(monday.getDate() + dayIndex);
          let dateStr = eventDate.toISOString().split("T")[0];

          const formatTime = (time) => {
            const [hours, minutes] = time.split(':');
            let hour = parseInt(hours);
            if (time.toLowerCase().includes('pm') && hour !== 12) hour += 12;
            if (time.toLowerCase().includes('am') && hour === 12) hour = 0;
            return `${hour.toString().padStart(2, '0')}:${minutes || '00'}:00`;
          };

          let eventStart = `${dateStr}T${formatTime(startTime)}`;
          let eventEnd = `${dateStr}T${formatTime(endTime)}`;

          events.push({
            id: course.courseCode,
            title: `${course.courseCode} - ${course.courseName}`,
            start: eventStart,
            end: eventEnd,
            extendedProps: {
              department: course.department,
              level: course.level,
              days: course.days,
              time: course.time,
              conflict: false
            },
            backgroundColor: getRandomColor(course.courseCode),
            borderColor: '#19396e',
            textColor: '#ffffff'
          });
        });
      });

      events.forEach((event1, i) => {
        events.forEach((event2, j) => {
          if (i !== j && event1.start === event2.start) {
            event1.extendedProps.conflict = true;
            event2.extendedProps.conflict = true;
          }
        });
      });

      return events;
    }

    function fetchCourses() {
      fetch("/api/courses")
        .then((res) => res.json())
        .then((data) => {
          updateCourseTable(data.courses || []);
        })
        .catch((err) => {
          console.error(err);
          document.getElementById("courseTableBody").innerHTML = `
              <tr>
                <td colspan="8" style="color:red;">Error loading courses</td>
              </tr>
            `;
        });
    }

    function updateCourseTable(courses) {
      const tbody = document.getElementById("courseTableBody");
      tbody.innerHTML = "";
      if (courses.length > 0) {
        courses.forEach((c) => {
          const row = document.createElement("tr");
          row.innerHTML = `
              <td>${c.courseCode}</td>
              <td>${c.courseName}</td>
              <td>${c.department}</td>
              <td>${c.level}</td>
              <td>${c.seats}</td>
              <td>${c.days ? c.days.join(", ") : "N/A"}</td>
              <td>${c.time || "N/A"}</td>
              <td><button class="btn" onclick='showCourseDetails(${JSON.stringify(
            c
          )})'>View Details</button></td>
            `;
          tbody.appendChild(row);
        });
      } else {
        tbody.innerHTML = `<tr><td colspan="8">No courses available</td></tr>`;
      }
    }

    function applyFilter() {
      const department = document.getElementById("department").value;
      const level = document.getElementById("level").value;
      const day = document.getElementById("days").value;
      const time = document.getElementById("time").value;

      let queryParams = [];
      if (department)
        queryParams.push(`department=${encodeURIComponent(department)}`);
      if (level) queryParams.push(`level=${encodeURIComponent(level)}`);
      if (day) queryParams.push(`day=${encodeURIComponent(day)}`);
      if (time) queryParams.push(`time=${encodeURIComponent(time)}`);
      let queryString = queryParams.join("&");

      fetch("/api/courses")
        .then((res) => res.json())
        .then((data) => {
          const filteredCourses = (data.courses || []).filter(course => {
            const matchesDepartment = !department || course.department === department;
            const matchesLevel = !level || course.level === level;
            const matchesDay = !day || (course.days && course.days.includes(day));
            const matchesTime = !time || isTimeInRange(course.time, time);
            return matchesDepartment && matchesLevel && matchesDay && matchesTime;
          });
          updateCourseTable(filteredCourses);
        })
        .catch((err) => {
          console.error(err);
          document.getElementById("courseTableBody").innerHTML = `
              <tr>
                <td colspan="8" style="color:red;">Error loading courses</td>
              </tr>
            `;
        });

      function isTimeInRange(courseTime, selectedTime) {
        if (!courseTime) return false;
        const [start, end] = courseTime.split('-').map(t => t.trim());
        const timeRanges = {
          morning: ['08:00', '12:00'],
          afternoon: ['12:00', '16:00'],
          evening: ['16:00', '20:00']
        };
        const [rangeStart, rangeEnd] = timeRanges[selectedTime] || [];
        if (!rangeStart || !rangeEnd) return true;

        return start >= rangeStart && end <= rangeEnd;
      }
    }

    async function loadRegisteredCourses() {
      try {
        const response = await fetch('/student/registered-courses');
        const data = await response.json();

        if (data.success) {
          const tbody = document.getElementById('registeredCoursesTable');
          tbody.innerHTML = '';

          if (data.courses && data.courses.length > 0) {
            data.courses.forEach(course => {
              const row = document.createElement('tr');
              row.innerHTML = `
                  <td>${course.courseCode}</td>
                  <td>${course.courseName}</td>
                  <td>${course.department}</td>
                  <td>${course.level}</td>
                  <td>${Array.isArray(course.days) ? course.days.join(', ') : 'N/A'}</td>
                  <td>${course.time || 'N/A'}</td>
              <td>
                ${course.completed ?
                  `<span class="completed-badge">Completed (${course.grade || 'No grade'})</span>` :
                  `<button class="btn complete-btn" data-registration-id="${course.registrationId}">Mark Complete</button>
                   <button class="btn drop-btn" data-course-code="${course.courseCode}">Drop Course</button>`
                }
              </td>
                `;
              tbody.appendChild(row);
            });

            const events = updateCalendarEvents(data.courses);
            calendar.removeAllEvents();
            calendar.addEventSource(events);
          } else {
            tbody.innerHTML = '<tr><td colspan="7">No registered courses found</td></tr>';
          }
        }
      } catch (error) {
        console.error('Error loading registered courses:', error);
        document.getElementById('registeredCoursesTable').innerHTML =
          '<tr><td colspan="7" style="color:red;">Error loading registered courses</td></tr>';
      }
    }

    function showCourseDetails(course) {
      document.getElementById("modalCourseTitle").textContent =
        course.courseName;
      document.getElementById("modalCourseCode").textContent =
        course.courseCode;
      document.getElementById("modalDepartment").textContent =
        course.department;
      document.getElementById("modalLevel").textContent = course.level;
      document.getElementById("modalPrerequisites").textContent =
        course.prerequisites && course.prerequisites.length
          ? course.prerequisites.join(", ")
          : "None";
      document.getElementById("courseDetailModal").style.display = "block";
    }

    document.getElementById("closeModal").addEventListener("click", () => {
      document.getElementById("courseDetailModal").style.display = "none";
    });

    fetchCourses();
    loadRegisteredCourses();
    loadCompletedCourses();
    setInterval(fetchCourses, 15000);

    document.addEventListener("DOMContentLoaded", function () {
      const calendarEl = document.getElementById("calendar");
      calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: "timeGridWeek",
        headerToolbar: {
          left: "prev,next today",
          center: "title",
          right: "timeGridWeek,timeGridDay",
        },
        slotMinTime: "00:00:00",
        slotMaxTime: "24:00:00",
        allDaySlot: false,
        nowIndicator: true,
        slotDuration: "01:00:00",
        expandRows: true,
        height: 'auto',
        events: [],
        eventDidMount: function (info) {
          if (info.event.extendedProps.conflict) {
            info.el.classList.add("conflict");
          }

          info.el.title = `${info.event.title}\n${info.event.extendedProps.department || ''}\n${info.event.extendedProps.level || ''}`;

          if (info.event.extendedProps.completed) {
            info.el.style.opacity = '0.7';
            info.el.style.textDecoration = 'line-through';
          }
        },
        eventClick: function (info) {
          showCourseDetails({
            courseCode: info.event.id,
            courseName: info.event.title.split(' - ')[1],
            department: info.event.extendedProps.department,
            level: info.event.extendedProps.level,
            days: info.event.extendedProps.days,
            time: info.event.extendedProps.time
          });
        },
        datesSet: function (dateInfo) {
          loadRegisteredCourses();
        }
      });
      calendar.render();
    });

    document
      .getElementById("searchBtn")
      .addEventListener("click", applyFilter);

    async function loadCompletedCourses() {
      try {
        const response = await fetch('/student/completed-courses');
        const data = await response.json();

        const tbody = document.getElementById('completedCoursesTable');
        tbody.innerHTML = '';

        if (data.success && data.courses.length > 0) {
          data.courses.forEach(course => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${course.courseCode}</td>
                <td>${course.courseName}</td>
                <td>${course.grade || 'N/A'}</td>
              `;
            tbody.appendChild(row);
          });
        } else {
          tbody.innerHTML = '<tr><td colspan="3">No completed courses found</td></tr>';
        }
      } catch (error) {
        console.error('Error loading completed courses:', error);
        document.getElementById('completedCoursesTable').innerHTML =
          '<tr><td colspan="3" style="color:red;">Error loading completed courses</td></tr>';
      }
    }

    document.addEventListener('click', async (e) => {
      if (e.target.classList.contains('complete-btn')) {
        const registrationId = e.target.dataset.registrationId;
        const grade = prompt('Enter grade for this course (A, B, C, D, F, W, I):');

        if (grade && ['A', 'B', 'C', 'D', 'F', 'W', 'I'].includes(grade.toUpperCase())) {
          try {
            const response = await fetch('/student/mark-complete', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                registrationId,
                grade: grade.toUpperCase()
              })
            });

            const data = await response.json();
            if (data.success) {
              alert('Course marked as completed successfully');
              loadRegisteredCourses();
              loadCompletedCourses();
            } else {
              alert(data.message || 'Error marking course complete');
            }
          } catch (error) {
            console.error('Error marking course complete:', error);
            alert('Error marking course complete');
          }
        } else if (grade) {
          alert('Please enter a valid grade (A, B, C, D, F, W, I)');
        }
      }
      if (e.target.classList.contains('drop-btn')) {
        const courseCode = e.target.dataset.courseCode;
        if (!confirm('Are you sure you want to drop this course?')) {
          return;
        }

        try {
          const response = await fetch(`/student/drop-course/${courseCode}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          const data = await response.json();

          if (data.success) {
            alert('Course dropped successfully');
            loadRegisteredCourses();
            fetchCourses();
          } else {
            alert(data.message || 'Error dropping course');
          }
        } catch (error) {
          console.error('Error dropping course:', error);
          alert('Error dropping course');
        }
      }
    });

    function getRandomColor(courseCode) {
      const colors = [
        '#0088b9',
        '#19396e',
        '#1e8c3f',
        '#ffc82e',
        '#0077a3',
        '#132e58',
        '#167534',
        '#e6b629',
        '#00a0d6',
        '#5b7bb8'
      ];
      const index = Math.abs(courseCode.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)) % colors.length;
      return colors[index];
    }
  </script>
</body>

</html>