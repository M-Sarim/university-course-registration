<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Student Dashboard</title>

  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />

  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
  <style>
    :root {
      --primary-color: #0099cc;
      --secondary-color: #ffcc00;
      --accent-color: #009966;
      --dark-blue: #003366;
      --light-bg: #f8f9fa;
      --card-bg: #fff;
      --text-color: #003366;
      --light-text: #fff;

    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Poppins", sans-serif;
      background-color: var(--light-bg);
      color: var(--text-color);
    }

    header {
      background-color: var(--primary-color);
      color: var(--light-text);
      padding: 15px 0;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .navbar {
      width: 90%;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .navbar h1 {
      font-size: 1.5rem;
    }

    nav.nav-links {
      display: flex;
      gap: 10px;
    }

    nav.nav-links a {
      color: var(--light-text);
      text-decoration: none;
      font-weight: 600;
      padding: 6px 12px;
      border-radius: 4px;
      transition: background-color 0.3s;
    }

    nav.nav-links a:hover {
      background-color: rgba(255, 255, 255, 0.15);
    }

    .container {
      width: 90%;
      margin: 20px auto;
    }

    footer {
      background-color: var(--primary-color);
      color: var(--light-text);
      text-align: center;
      padding: 15px;
      margin-top: 30px;
    }

    .card {
      background-color: var(--card-bg);
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      padding: 20px;
      margin-bottom: 20px;
    }

    .card h2 {
      margin-bottom: 15px;
      font-size: 1.2rem;
      color: var(--dark-blue);
    }

    .row {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }

    .col-3,
    .col-6,
    .col-9,
    .col-12 {
      padding: 5px;
    }

    @media (max-width: 768px) {
      .row {
        flex-direction: column;
      }
    }

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .btn {
      background-color: var(--secondary-color);
      color: var(--dark-blue);
      padding: 8px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      font-weight: 600;
      transition: background 0.3s;
    }

    .btn:hover {
      background-color: #c08900;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    table thead tr {
      background-color: var(--secondary-color);
    }

    table th,
    table td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    #calendar {
      max-width: 100%;
      margin: 0 auto;
    }

    .conflict {
      background-color: rgba(231, 76, 60, 0.7) !important;
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
      background-color: var(--card-bg);
      margin: 10% auto;
      padding: 20px;
      border-radius: 8px;
      width: 80%;
      max-width: 600px;
    }

    .close-modal {
      float: right;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--secondary-color);
    }
  </style>
</head>

<body>
  <header>
    <div class="navbar">
      <h1>Course Management System</h1>
      <nav class="nav-links">
        <a href="/student/dashboard">Dashboard</a>
        <a href="/student/register">Register Course</a>
        <a href="/student/schedule">Weekly Schedule</a>
        <a href="/auth/logout">Logout</a>
      </nav>
    </div>
  </header>
  <div class="container">
    <div class="card">
      <h2>Filter Courses</h2>
      <div class="row">
        <div class="col-3">
          <label for="department">Department</label>
          <select id="department" class="form-control">
            <option value="">All</option>
            <option value="Software Engineering">Software Engineering</option>
            <option value="Computer Science">Computer Science</option>
            <option value="Data Science">Data Science</option>
            <option value="Artificial Intelligence">
              Artificial Intelligence
            </option>
          </select>
        </div>
        <div class="col-3">
          <label for="level">Level</label>
          <select id="level" class="form-control">
            <option value="">All</option>
            <option value="100">100</option>
            <option value="200">200</option>
            <option value="300">300</option>
            <option value="400">400</option>
            <option value="500">500</option>
          </select>
        </div>
        <div class="col-3">
          <label for="days">Days</label>
          <select id="days" class="form-control">
            <option value="">Any</option>
            <option value="Mon">Mon</option>
            <option value="Tue">Tue</option>
            <option value="Wed">Wed</option>
            <option value="Thu">Thu</option>
            <option value="Fri">Fri</option>
          </select>
        </div>
        <div class="col-3">
          <label for="time">Time</label>
          <select id="time" class="form-control">
            <option value="">Any</option>
            <option value="morning">Morning (8AM-12PM)</option>
            <option value="afternoon">Afternoon (12PM-4PM)</option>
            <option value="evening">Evening (4PM-8PM)</option>
          </select>
        </div>
      </div>
      <button id="searchBtn" class="btn" style="margin-top: 10px">
        Search
      </button>
    </div>

    <div class="card">
      <h2>Available Courses</h2>
      <table>
        <thead>
          <tr>
            <th>Course Code</th>
            <th>Title</th>
            <th>Department</th>
            <th>Level</th>
            <th>Seats</th>
            <th>Days</th>
            <th>Time</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="courseTableBody">
          <tr>
            <td colspan="8">Loading courses...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="card">
      <h2>Your Registered Courses</h2>
      <table>
        <thead>
          <tr>
            <th>Course Code</th>
            <th>Title</th>
            <th>Department</th>
            <th>Level</th>
          </tr>
        </thead>
        <tbody id="registeredCourseTableBody">
          <tr>
            <td colspan="4">Loading registered courses...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="card">
      <h2>Your Weekly Schedule</h2>
      <div id="calendar"></div>
    </div>
  </div>
  <footer>
    <p>&copy; 2025 National University of Sciences. All rights reserved.</p>
  </footer>

  <div id="courseDetailModal" class="modal">
    <div class="modal-content">
      <span class="close-modal" id="closeModal">&times;</span>
      <h2 id="modalCourseTitle">Course Details</h2>
      <p><strong>Course Code:</strong> <span id="modalCourseCode"></span></p>
      <p><strong>Department:</strong> <span id="modalDepartment"></span></p>
      <p><strong>Level:</strong> <span id="modalLevel"></span></p>
      <p>
        <strong>Prerequisites:</strong> <span id="modalPrerequisites"></span>
      </p>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
  <script>
    let calendar;

    function updateCalendarEvents(registeredCourses) {
      let events = [];
      const now = new Date();
      const dayOfWeek = now.getDay();
      const diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
      const monday = new Date(now);
      monday.setDate(now.getDate() + diffToMonday);

      registeredCourses.forEach((course) => {
        if (!course.time || !course.days || !course.days.length) return;
        const times = course.time.split("-");
        if (times.length !== 2) return;
        const startTime = times[0].trim();
        const endTime = times[1].trim();
        course.days.forEach((day) => {
          let dayIndex;
          switch (day.toLowerCase()) {
            case "mon":
            case "monday":
              dayIndex = 0;
              break;
            case "tue":
            case "tuesday":
              dayIndex = 1;
              break;
            case "wed":
            case "wednesday":
              dayIndex = 2;
              break;
            case "thu":
            case "thursday":
              dayIndex = 3;
              break;
            case "fri":
            case "friday":
              dayIndex = 4;
              break;
            case "sat":
            case "saturday":
              dayIndex = 5;
              break;
            case "sun":
            case "sunday":
              dayIndex = 6;
              break;
            default:
              dayIndex = 0;
          }
          let eventDate = new Date(monday);
          eventDate.setDate(monday.getDate() + dayIndex);
          let dateStr = eventDate.toISOString().split("T")[0];
          let eventStart = `${dateStr}T${startTime}:00`;
          let eventEnd = `${dateStr}T${endTime}:00`;
          events.push({
            id: course.courseCode,
            title: `${course.courseCode} - ${course.courseName}`,
            start: eventStart,
            end: eventEnd,
            extendedProps: { conflict: false },
          });
        });
      });
      return events;
    }

    function fetchCourses() {
      fetch("/api/courses")
        .then((res) => res.json())
        .then((data) => {
          updateCourseTable(data.courses || []);
        })
        .catch((err) => {
          console.error(err);
          document.getElementById("courseTableBody").innerHTML = `
              <tr>
                <td colspan="8" style="color:red;">Error loading courses</td>
              </tr>
            `;
        });
    }

    function updateCourseTable(courses) {
      const tbody = document.getElementById("courseTableBody");
      tbody.innerHTML = "";
      if (courses.length > 0) {
        courses.forEach((c) => {
          const row = document.createElement("tr");
          row.innerHTML = `
              <td>${c.courseCode}</td>
              <td>${c.courseName}</td>
              <td>${c.department}</td>
              <td>${c.level}</td>
              <td>${c.seats}</td>
              <td>${c.days ? c.days.join(", ") : "N/A"}</td>
              <td>${c.time || "N/A"}</td>
              <td><button class="btn" onclick='showCourseDetails(${JSON.stringify(
            c
          )})'>View Details</button></td>
            `;
          tbody.appendChild(row);
        });
      } else {
        tbody.innerHTML = `<tr><td colspan="8">No courses available</td></tr>`;
      }
    }

    function applyFilter() {
      const department = document.getElementById("department").value;
      const level = document.getElementById("level").value;
      const day = document.getElementById("days").value;
      const time = document.getElementById("time").value;

      let queryParams = [];
      if (department)
        queryParams.push(`department=${encodeURIComponent(department)}`);
      if (level) queryParams.push(`level=${encodeURIComponent(level)}`);
      if (day) queryParams.push(`day=${encodeURIComponent(day)}`);
      if (time) queryParams.push(`time=${encodeURIComponent(time)}`);
      let queryString = queryParams.join("&");

      fetch(`/student/search?${queryString}`)
        .then((res) => res.json())
        .then((data) => {
          updateCourseTable(data.courses || []);
        })
        .catch((err) => {
          console.error(err);
          document.getElementById("courseTableBody").innerHTML = `
              <tr>
                <td colspan="8" style="color:red;">Error loading courses</td>
              </tr>
            `;
        });
    }

    function fetchRegisteredCourses() {
      fetch("/api/registered-courses")
        .then((res) => res.json())
        .then((data) => {
          const courses = data.courses || [];
          const tbody = document.getElementById("registeredCourseTableBody");
          tbody.innerHTML = "";
          if (courses.length > 0) {
            courses.forEach((c) => {
              const row = document.createElement("tr");
              row.innerHTML = `
                  <td>${c.courseCode}</td>
                  <td>${c.courseName}</td>
                  <td>${c.department}</td>
                  <td>${c.level}</td>
                `;
              tbody.appendChild(row);
            });
          } else {
            tbody.innerHTML = `<tr><td colspan="4">No registered courses found</td></tr>`;
          }
          const events = updateCalendarEvents(courses);
          if (calendar) {
            calendar.removeAllEvents();
            events.forEach((event) => calendar.addEvent(event));
          }
        })
        .catch((err) => {
          console.error(err);
          document.getElementById("registeredCourseTableBody").innerHTML = `
              <tr>
                <td colspan="4" style="color:red;">Error loading registered courses</td>
              </tr>
            `;
        });
    }

    function showCourseDetails(course) {
      document.getElementById("modalCourseTitle").textContent =
        course.courseName;
      document.getElementById("modalCourseCode").textContent =
        course.courseCode;
      document.getElementById("modalDepartment").textContent =
        course.department;
      document.getElementById("modalLevel").textContent = course.level;
      document.getElementById("modalPrerequisites").textContent =
        course.prerequisites && course.prerequisites.length
          ? course.prerequisites.join(", ")
          : "None";
      document.getElementById("courseDetailModal").style.display = "block";
    }

    document.getElementById("closeModal").addEventListener("click", () => {
      document.getElementById("courseDetailModal").style.display = "none";
    });

    fetchCourses();
    fetchRegisteredCourses();
    setInterval(fetchCourses, 15000);
    setInterval(fetchRegisteredCourses, 30000);

    document.addEventListener("DOMContentLoaded", function () {
      const calendarEl = document.getElementById("calendar");
      calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: "timeGridWeek",
        headerToolbar: {
          left: "prev,next today",
          center: "title",
          right: "timeGridWeek,timeGridDay",
        },
        nowIndicator: true,
        events: [],
        eventDidMount: function (info) {
          if (info.event.extendedProps.conflict) {
            info.el.classList.add("conflict");
          }
        },
      });
      calendar.render();
    });

    document
      .getElementById("searchBtn")
      .addEventListener("click", applyFilter);
  </script>
</body>

</html>